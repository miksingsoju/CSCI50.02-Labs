*******************************************************************************
* LAB #5
* - Buenaobra, John Aldrich
* - Cayago, Mikylla Cherrizse
* - Sy, Mishka
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

* Full adder
.subckt fa a b c_in sum c_out
  Xnand1 a b out1 nand2
  Xnand2 a out1 out2 nand2
  Xnand3 b out1 out3 nand2
  Xnand4 out2 out3 out4 nand2

  * this uses the carry_in as one of the inputs
  Xnand5 out4 c_in out5 nand2

  Xnand6 out4 out5 out6 nand2
  Xnand7 out5 c_in out7 nand2

  * This outputs the sum
  Xnand8 out6 out7 sum nand2

  * This outputs the carry out
  Xnand9 out1 out5 c_out nand2
.ends

* 32-bit adder
.subckt add32 a[31:0] b[31:0] cin0 sum[31:0] cout[31:30]
  Xadder a[31:0] b[31:0] cout[30:0] cin0 sum[31:0] cout[31:0] fa
.ends

*******************************************************************************
* Lab 5: Subtractor and Comparator
*******************************************************************************
.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z
  *inverts b
  Xinv b[31:0] b_inv[31:0] inverter

  *chooses between b or inv b depending on op code
  Xmux op0#32 b[31:0] b_inv[31:0] b_sel[31:0] mux2

  *adder/subtractor
  Xadd a[31:0] b_sel[31:0] op0 fas[31:0] cout[31:30] add32

  *negative flag
  .connect fas[31] n 

  *zero flag
  Xnor0 fas[0:3] n0 nor4
  Xnor1 fas[4:7] n1 nor4
  Xnor2 fas[8:11] n2 nor4
  Xnor3 fas[12:15] n3 nor4
  Xnor4 fas[16:19] n4 nor4
  Xnor5 fas[20:23] n5 nor4
  Xnor6 fas[24:27] n6 nor4
  Xnor7 fas[28:31] n7 nor4

  Xnand1 n[0:3] m1 nand4
  Xnand2 n[4:7] m2 nand4

  Xnor9 m1 m2 z nor2

  *overflow flag
  Xof cout[31] cout[30] v xor2
.ends

.subckt cmp32 n v z op[2:1] fcmp[31:0]
  * fcmp[0] = result bit, others grounded
  .connect 0 fcmp[1:31]

  * A = B: z
  * A < B: n XOR v (for signed comparison)
  Xxor n v a_lessthan_b xor2

  * Select between equality check (z) and less-than check (a_lessthan_b)
  Xmux1 op1 z a_lessthan_b temp1 mux2

  * Select final result based on op2
  Xmux2 op2 a_lessthan_b temp1 fcmp0 mux2
.ends

*******************************************************************************
* Instantiate as32 + cmp32 chain
*******************************************************************************

.subckt as_cmp32 a[31:0] b[31:0] op[2:0] fcmp[31:0] fas[31:0] n v z
  Xas32 a[31:0] b[31:0] op[0] fas[31:0] n v z as32
  Xcmp32 n v z op[2:1] fcmp[31:0] cmp32
.ends

Xascmp a[31:0] b[31:0] op[2:0] fcmp[31:0] fas[31:0] n v z as_cmp32

*******************************************************************************
* 14 Test Cases for Addition/Subtraction 
*******************************************************************************

* Test 1: 0 + 0 (op0=0)
Wa1 a[31:0] nrz(0, 14, 50ns, 0ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Wb1 b[31:0] nrz(0, 14, 50ns, 0ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0

* Test 2: 0x55555555 + 0 (op0=0)
Wa2 a[31:0] nrz(0, 14, 50ns, 50ns, 0.001ns, 0.001ns) 
+ 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555
Wb2 b[31:0] nrz(0, 14, 50ns, 50ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0

* Test 3: 0 + 0x55555555 (op0=0)
Wa3 a[31:0] nrz(0, 14, 50ns, 100ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Wb3 b[31:0] nrz(0, 14, 50ns, 100ns, 0.001ns, 0.001ns) 
+ 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555

* Test 4: 0x55555555 + 0x55555555 (op0=0)
Wa4 a[31:0] nrz(0, 14, 50ns, 150ns, 0.001ns, 0.001ns) 
+ 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555
Wb4 b[31:0] nrz(0, 14, 50ns, 150ns, 0.001ns, 0.001ns) 
+ 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555 0x55555555

* Test 5: -1 + -1 (op0=0)
Wa5 a[31:0] nrz(0, 14, 50ns, 200ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
Wb5 b[31:0] nrz(0, 14, 50ns, 200ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1

* Test 6: 0 - 0 (op0=1, op[2:1]=00)
Wa6 a[31:0] nrz(0, 14, 50ns, 250ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Wb6 b[31:0] nrz(0, 14, 50ns, 250ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0

* Test 7: 0 - -1 (op0=1, op[2:1]=00)
Wa7 a[31:0] nrz(0, 14, 50ns, 300ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Wb7 b[31:0] nrz(0, 14, 50ns, 300ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1

* Test 8: 0xAAAAAAA + 0 (op0=0)
Wa8 a[31:0] nrz(0, 14, 50ns, 350ns, 0.001ns, 0.001ns) 
+ 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA 0xAAAAAAA
Wb8 b[31:0] nrz(0, 14, 50ns, 350ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0

* Test 9: 0 + 0xAAAAAAAAA (op0=0)
Wa9 a[31:0] nrz(0, 14, 50ns, 400ns, 0.001ns, 0.001ns) 
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Wb9 b[31:0] nrz(0, 14, 50ns, 400ns, 0.001ns, 0.001ns) 
+ 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA

* Test 10: 0xAAAAAAAAA + 0xAAAAAAAAA (op0=0)
Wa10 a[31:0] nrz(0, 14, 50ns, 450ns, 0.001ns, 0.001ns) 
+ 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA
Wb10 b[31:0] nrz(0, 14, 50ns, 450ns, 0.001ns, 0.001ns) 
+ 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA

* Test 11: 1 + -1 (op0=0)
Wa11 a[31:0] nrz(0, 14, 50ns, 500ns, 0.001ns, 0.001ns) 
+ 1 1 1 1 1 1 1 1 1 1 1 1 1 1
Wb11 b[31:0] nrz(0, 14, 50ns, 500ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1

* Test 12: -1 + 1 (op0=0)
Wa12 a[31:0] nrz(0, 14, 50ns, 550ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
Wb12 b[31:0] nrz(0, 14, 50ns, 550ns, 0.001ns, 0.001ns) 
+ 1 1 1 1 1 1 1 1 1 1 1 1 1 1

* Test 13: 0x80000000 + 0x80000000 (op0=0)
Wa13 a[31:0] nrz(0, 14, 50ns, 600ns, 0.001ns, 0.001ns) 
+ 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000
Wb13 b[31:0] nrz(0, 14, 50ns, 600ns, 0.001ns, 0.001ns) 
+ 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000

* Test 14: -1 - -1 (op0=1, op[2:1]=00)
Wa14 a[31:0] nrz(0, 14, 50ns, 650ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
Wb14 b[31:0] nrz(0, 14, 50ns, 650ns, 0.001ns, 0.001ns) 
+ -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1

*******************************************************************************

* op0 control for all 14 tests (0=add, 1=sub)
Wall_op0 op0 nrz(0, 14, 50ns, 0ns, 0.001ns, 0.001ns)
+ 0 0 0 0 0 1 1 0 0 0 0 0 0 1

* op[2:1] control for arithmetic tests (00 = no comparison)
Wop1_arith op1 nrz(0, 14, 50ns, 0ns, 0.001ns, 0.001ns)
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Warith_op2 op2 nrz(0, 14, 50ns, 0ns, 0.001ns, 0.001ns)
+ 0 0 0 0 0 0 0 0 0 0 0 0 0 0

*******************************************************************************
* Test Cases for Comparison
*******************************************************************************

* Comparison modes:
* op0=1, op[2:1]=01 → A = B
* op0=1, op[2:1]=10 → A < B  
* op0=1, op[2:1]=11 → A <= B

* Test 1: 2 with -3 (A=2, B=-3)
Wcomp_a1 a[31:0] nrz(0, 15, 50ns, 700ns, 0.001ns, 0.001ns)
+ 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
Wcomp_b1 b[31:0] nrz(0, 15, 50ns, 700ns, 0.001ns, 0.001ns)
+ -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3

* Test 2: 0x80000000 with 2 (A=0x80000000, B=2)
Wcomp_a2 a[31:0] nrz(0, 15, 50ns, 750ns, 0.001ns, 0.001ns)
+ 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000 0x80000000
Wcomp_b2 b[31:0] nrz(0, 15, 50ns, 750ns, 0.001ns, 0.001ns)
+ 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2

* Test 3: 3 with 5 (A=3, B=5)
Wcomp_a3 a[31:0] nrz(0, 15, 50ns, 800ns, 0.001ns, 0.001ns)
+ 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
Wcomp_b3 b[31:0] nrz(0, 15, 50ns, 800ns, 0.001ns, 0.001ns)
+ 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5

* Test 4: 0x7FFFFFFF with -2 (A=0x7FFFFFFF, B=-2)
Wcomp_a4 a[31:0] nrz(0, 15, 50ns, 850ns, 0.001ns, 0.001ns)
+ 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF 0x7FFFFFFF
Wcomp_b4 b[31:0] nrz(0, 15, 50ns, 850ns, 0.001ns, 0.001ns)
+ -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2

* Test 5: 3 with 3 (A=3, B=3)
Wcomp_a5 a[31:0] nrz(0, 15, 50ns, 900ns, 0.001ns, 0.001ns)
+ 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
Wcomp_b5 b[31:0] nrz(0, 15, 50ns, 900ns, 0.001ns, 0.001ns)
+ 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3

*******************************************************************************

* op0=1 (subtraction) for all comparison tests
Wcomp_op0_all op0 nrz(0, 15, 50ns, 700ns, 0.001ns, 0.001ns)
+ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

* op1 and op2 for comparison modes (3 variants per test case: 01, 10, 11)
Wallcomp_op1 op1 nrz(0, 15, 50ns, 700ns, 0.001ns, 0.001ns)
+ 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1
Wallcomp_op2 op2 nrz(0, 15, 50ns, 700ns, 0.001ns, 0.001ns)
+ 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0


*******************************************************************************
* Plot 
*******************************************************************************
.tran 300ns
.plot a[31:0]
.plot op0
.plot op[2:1]
.plot b[31:0]
.plot fas[31:0]
.plot fcmp[31:0]
.plot n
.plot v
.plot z

*******************************************************************************
* Critical Path Analysis
*******************************************************************************

*******************************************************************************

* insert analysis here
*******************************************************************************














