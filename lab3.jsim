*******************************************************************************
* LAB #3
* - Buenaobra, John Aldrich
* - Cayago, Mikylla Cherrizse
* - Sy, Mishka
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"


*******************************************************************************
* Nand Definition of a Full-Adder
* By definition
* Full Adder Sum = X ⊕ Y ⊕ Z, where Z is the Carry in
* X ⊕ Y= X!Y + !XY
* X ⊕ Y = !(!(X!Y)!(!XY))                 !NOTE A + B = (!A NAND !B)
* X ⊕ Y ⊕ CIn = !(!(X!Y)!(!XY)) ⊕ CIn    !For Simplification Purposes we will simplify X ⊕ Y as S the Sum 
* S ⊕ Z = S!Z + !SZ
* S ⊕ Z = S!Z + !SZ
* S ⊕ Z = !(!(S!Z)!(!SZ))
* Here you can either use this already to configure the subckt but we still graphed it's circuit 
* and based the inputs outputs of each Nand There for double-checking
*******************************************************************************

.subckt fa a b c_in sum c_out
    Xnand1 a B out1 nand2
    Xnand2 a out1 out2 nand2
    Xnand3 b out1 out3 nand2
    Xnand4 out2 out3 out4 nand2
    Xnand5 out4 c_in out5 nand2
    Xnand6 out4 out5 out6 nand2
    Xnand7 out5 c_in out7 nand2
    Xnand8 out6 out7 Sum nand2
    Xnand9 out1 out5 c_out nand2
.ends

.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]
    XFa0 a0 b0 c_in0 sum0 c_out0 fa
    XFa1 a1 b1 c_out0 sum1 c_out1 fa
    XFa2 a2 b2 c_out1 sum2 c_out2 fa
    XFa3 a3 b3 c_out2 sum3 c_out3 fa
.ends

*******************************************************************************
* This instantiates subcircuit fa
* Connect A, B, Carry_in to clk5, clk6, clk7
*******************************************************************************

Xsum a[31:0] b[31:0] 0 sum[31:0] c31 c30 add32

.tran 640ns


* Plot clk1 to clk7
.plot clk1
.plot clk2
.plot clk3
.plot clk4
.plot clk5
.plot clk6
.plot clk7

* Plot the sum of the fa
.plot fa_sum

* Plot the carry of fa
.plot fa_carry
