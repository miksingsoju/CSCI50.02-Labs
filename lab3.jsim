*******************************************************************************
* LAB #3
* - Buenaobra, John Aldrich
* - Cayago, Mikylla Cherrizse
* - Sy, Mishka
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

*******************************************************************************
* Nand Definition of a Full-Adder
* By definition
* Full Adder Sum = X ⊕ Y ⊕ Z, where Z is the Carry in
* X ⊕ Y= X!Y + !XY
* X ⊕ Y = !(!(X!Y)!(!XY))                 !NOTE A + B = (!A NAND !B)
* X ⊕ Y ⊕ CIn = !(!(X!Y)!(!XY)) ⊕ CIn    !For Simplification Purposes we will simplify X ⊕ Y as S the Sum 
* S ⊕ Z = S!Z + !SZ
* S ⊕ Z = S!Z + !SZ
* S ⊕ Z = !(!(S!Z)!(!SZ))
* Here you can either use this already to configure the subckt but we still graphed it's circuit 
* and based the inputs outputs of each Nand There for double-checking
*******************************************************************************

.subckt fa  A B Cin Sum Cout
    Xnand1 A B out1 nand2
    Xnand2 A out1 out2 nand2
    Xnand3 B out1 out3 nand2
    Xnand4 out2 out3 out4 nand2
    Xnand5 out4 Cin out5 nand2
    Xnand6 out4 out5 out6 nand2
    Xnand7 out5 Cin out7 nand2
    Xnand8 out6 out7 Sum nand2
    Xnand9 out1 out5 Cout nand2
.ends

*******************************************************************************
* This instantiates subcircuit fa
* Connect A, B, Carry_in to clk5, clk6, clk7
*******************************************************************************

Xmy_fa clk5 clk6 clk7 fa_sum fa_carry fa



*******************************************************************************
* 32-bit Adder
* insert explanation here
*******************************************************************************

.subckt add32 a[31:0] b[31:0] cin0 sum[31:0] cout[31:30]
* start code here
.ends

*******************************************************************************
* This instantiates subcircuit add32
* insert explanation
*******************************************************************************

Xsum a[31:0] b[31:0] 0 sum[31:0] c31 c30 add32



*******************************************************************************
* These are the digital waveforms for testing
* insert explanation
*******************************************************************************

* Digital Waveform for input a[31:0]
Wa a[31:0] nrz(0, 5, 200ns, 0ns, 0.001ns, 0.001ns)
+ 0x00000000 0x55555555 0x00000000 0x55555555 0xFFFFFFFF 0x0AAAAAAA 0x00000000 0x0AAAAAAA 0x00000001 0xFFFFFFFF

* Digital Waveform for input b[31:0]
Wb b[31:0] nrz(0, 5, 200ns, 0ns, 0.001ns, 0.001ns)
+ 0x00000000 0x00000000 0x55555555 0x55555555 0xFFFFFFFF 0x00000000 0x0AAAAAAA 0x0AAAAAAA 0xFFFFFFFF 0x00000001



.tran 640ns


* Plot clk1 to clk7
.plot clk1
.plot clk2
.plot clk3
.plot clk4
.plot clk5
.plot clk6
.plot clk7


* Plot the sum of the fa
.plot fa_sum

* Plot the carry of fa
.plot fa_carry

* Plot the inputs and sum output
.plot a[31:0]
.plot b[31:0]
.plot sum[31:0]
