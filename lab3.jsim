*******************************************************************************
* LAB #3
* - Buenaobra, John Aldrich
* - Cayago, Mikylla Cherrizse
* - Sy, Mishka
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

*******************************************************************************
* The subcircuit fx implements ABC + DE + FG using 4 NAND Gates
* We used NAND Gates because the transition delay is lesser than
* when implementing fx using AND gates and OR gates
*      .subckt fx2 a b c d e f g out
*           Xand1 a b c abc and3
*           Xand2 d e de and2 
*           Xand3 f g fg and2
*           Xout abc de fg out or3
*      .ends
*
* When plotting both circuits, it appears that there is a 0.24-0.26ns difference
* in the delay
* Therefore, using NAND Gates are more efficient for implementing fx
*
* The equation for OUT = ABC + DE + FG was obtained by using De Morgan's Law as follows:
* OUT = (ABC + DE + FG)'
* OUT' = (ABC)'(DE)'(FG)'
* Since OUT' = (ABC)'(DE)'(FG)',
* OUT can be obtained from OUT' by negating it again 
* OUT'' = ((ABC)'(DE)'(FG)')'
* OUT = Nand( Nand(ABC),Nand(DE),Nand(FG))
*******************************************************************************


.subckt fx a b c d e f g out
* NAND ABC using 3 input NAND gate
    Xnand1 a b c abc nand3

* NAND DE using 2 input NAND gate
    Xnand2 d e de nand2

* NAND FG using 2 input NAND gate
    Xnand3 f g fg nand2

* NAND ABC, FG, and DE using 3 input NAND Gate
* This is the output of the subcircuit
    Xnand4 abc de fg out nand3
.ends


*******************************************************************************
* Nand Definition of a Full-Adder
* By definition
* Full Adder Sum = X ⊕ Y ⊕ Z, where Z is the Carry in
* X ⊕ Y= X!Y + !XY
* X ⊕ Y = !(!(X!Y)!(!XY))                 !NOTE A + B = (!A NAND !B)
* X ⊕ Y ⊕ CIn = !(!(X!Y)!(!XY)) ⊕ CIn    !For Simplification Purposes we will simplify X ⊕ Y as S the Sum 
* S ⊕ Z = S!Z + !SZ
* S ⊕ Z = S!Z + !SZ
* S ⊕ Z = !(!(S!Z)!(!SZ))
* Here you can either use this already to configure the subckt but we still graphed it's circuit 
* and based the inputs outputs of each Nand There for double-checking
*******************************************************************************


.subckt fa  A B Cin Sum Cout
    Xnand1 A B out1 nand2
    Xnand2 A out1 out2 nand2
    Xnand3 B out1 out3 nand2
    Xnand4 out2 out3 out4 nand2
    Xnand5 out4 Cin out5 nand2
    Xnand6 out4 out5 out6 nand2
    Xnand7 out5 Cin out7 nand2
    Xnand8 out6 out7 Sum nand2
    Xnand9 out1 out5 Cout nand2
.ends

*******************************************************************************
* 32-bit Adder
* insert explanation here
*******************************************************************************

.subckt add32 a[31:0] b[31:0] cin0 sum[31:0] cout[31:30]
* start code here
.ends


*******************************************************************************
* This instantiates subcircuit fx 
* Connect a, b, c, d, e, f, g, out to [clk1 to clk7]
*******************************************************************************

Xmy_fx clk1 clk2 clk3 clk4 clk5 clk6 clk7 out fx

*******************************************************************************
* This instantiates subcircuit fa
* Connect A, B, Carry_in to clk5, clk6, clk7
*******************************************************************************

Xmy_fa clk5 clk6 clk7 fa_sum fa_carry fa

*******************************************************************************
* This instantiates subcircuit add32
* insert explanation
*******************************************************************************

Xsum a[31:0] b[31:0] 0 sum[31:0] c31 c30 add32

*******************************************************************************
* These are the digital waveforms for testing
* insert explanation
*******************************************************************************

.tran 640ns


* Plot clk1 to clk7
.plot clk1
.plot clk2
.plot clk3
.plot clk4
.plot clk5
.plot clk6
.plot clk7

* Plot the output of fx
.plot out

* Plot the sum of the fa
.plot fa_sum

* Plot the carry of fa
.plot fa_carry
