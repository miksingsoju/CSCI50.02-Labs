*******************************************************************************
* All lines that begin with * are comments. You may safely remove them for your
* own submissions, but as with any programming exercise, please put in your own
* comments to explain your code!
*
* In your own submissions, make sure to replace this comment block with your
* names, in the following format:
*
* LAB #2
* - Buenaobra, John Aldrich
* - Cayago, Mikylla
* - Sy, Mishka
*
* Make sure your names are in alphabetical order, Last Name before First Name.
* You will get deductions if you don't strictly follow this format.
*******************************************************************************


*******************************************************************************
* The following .include lines are necessary for all your CSCI 50.02 JSim
* exercises. These work like your Java import statement.
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"


*******************************************************************************
* What follows is a (one-line) statement that describes our first "Hello
* World!" circuit. This statement is in the form:
*
*   Xid a z inverter
*
* Xid is just the name we give to this circuit block (in this case, Xinv).
* a is an input node ("clk1" is a 10ns-period clock defined in 8clocks.jsim).
* z is an output node (the name "out" is just something we made up).
* inverter is the type of subcircuit that we want (defined in stdcell.jsim).
*******************************************************************************

* Nand Definition of a Full-Adder
.subckt fa  A B Cin Sum Cout
    Xnand1 A B out1 nand2
    Xnand2 A out1 out2 nand2
    Xnand3 B out1 out3 nand2
    Xnand4 out2 out3 out4 nand2
    Xnand5 out4 Cin out5 nand2
    Xnand6 out4 out5 out6 nand2
    Xnand7 out5 Cin out7 nand2
    Xnand8 out6 out7 Sum nand2
    Xnand9 out1 out5 Cout nand2
.ends

* Connect A, B, Carry_in to clk5, clk6, clk7
Xmy_fa clk5 clk6 clk7 fa_sum fa_carry fa

*******************************************************************************
* The circuit above does NOT display anything in the simulator. We tell JSim
* to display something via .tran and .plot commands. The .tran statement
* specifies the period of time (the "transient") that we want to plot.
* Afterwards, we just .plot the nodes that we are interested in.
*
* In this example, we plot the input and the output of the Xinv circuit in two
* separate "plot channels". (You can plot both signals in one channel by saying
* ".plot clk1 out" instead, but it will be hard to see any overlaps in signal.)
*******************************************************************************


.tran 1200ns

.plot clk1
.plot clk2
.plot clk3
.plot clk4
.plot clk5
.plot clk6
.plot clk7


.plot fa_sum
.plot fa_carry


*******************************************************************************
* To actually see these plots, click the "Gate-level Simulation" button on the
* toolbar (fourth button from the right, the one that looks like an AND gate).
* This opens a separate Plot Window.
*
* While these .jsim files need to be opened in JSim to perform the simulations,
* we HIGHLY recommend that you edit these files in a full-fledged text editor
* instead of from within JSim's own editor, because the JSim editor does NOT
* have undo/redo functions. I personally recommend Visual Studio Code:
*
*   https://code.visualstudio.com/
*
* Then, when you want to see your changes on the Plot Window, simply click the
* "Reload Files" button (the button with the green looping arrows on a sheet of
* paper), then re-simulate by clicking the "Gate-level Simulation" button (the
* Plot Window has its own). It is NOT enough to click just one of the two
* buttons -- you have to click Reload, then Simulation, in that order!
*
* Happy hacking! - eric, ros, gab
*******************************************************************************
